代码结构
view_base 视图基类
concept view
viewable_range 可转换成view的range
    -> borrowed_range -> 来处 bits/range_access.h 头文件
    -> 一个range 可以被轩换convert to view

https://en.cppreference.com/w/cpp/ranges/borrowed_range

// Part of the constraints of ranges::borrowed_range
template<typename _Tp>
  concept __maybe_borrowed_range
= is_lvalue_reference_v<_Tp>
  || enable_borrowed_range<remove_cvref_t<_Tp>>;

template<typename _Tp>
concept borrowed_range
  = range<_Tp> && __detail::__maybe_borrowed_range<_Tp>;

__details {
    concept __simple_view 简单的view
    __has_arrow
    __not_same_as
}

view_interface view的接口类

__details { //都是concept
    __convertible_to_non_slicing
    __pair_like
    __pair_like_convertible_from
    __iterator_sentinel_pair
}
enum class subrange_kind : bool { unsized, sized };

class subrange : public view_interface<subrange<_It, _Sent, _Kind>>
后面是一系列的 : User-defined_deduction_guides https://en.cppreference.com/w/cpp/language/class_template_argument_deduction#User-defined_deduction_guides

get(subrange) 助手函数
enable_borrowed_range<subrange>的特化

class dangling ->https://en.cppreference.com/w/cpp/ranges/dangling

borrowed_iterator_t -> 定义了两种类型
borrowed_subrange_t

class empty_view

namespace __details {
    __box ??
}

class single_view

class itoa_view

namespace views {
    empty_view {} 实例
    single 实例
    itoa 实例
}



class basic_istream_view

函数 istream_view

namespace views
    class _RangeAdaptor

ref_view

namespace views
    inline constexpr __adaptor::_RangeAdaptorClosure all
    using all_t = decltype(all(std::declval<_Range>()));

class filter_view

namespace views
    inline constexpr __adaptor::_RangeAdaptor filter


class transform_view : public view_interface<transform_view<_Vp, _Fp>>


namespace views
    inline constexpr __adaptor::_RangeAdaptor transform

class take_view : public view_interface<take_view<_Vp>>

namespace views
    inline constexpr __adaptor::_RangeAdaptor take
    
take_while_view
drop_view
drop_while_view
join_view
split_view
common_view
reverse_view
elements_view
keys_view
values_view


tuple_size
tuple_element

---------------------------------------------------------------------------------------------------------------

range库的组成

- ranges algorithms https://en.cppreference.com/w/cpp/algorithm/ranges
- ranges adaptors https://en.cppreference.com/w/cpp/ranges#Range_adaptors
- be composed into pipeline

??
https://en.cppreference.com/w/cpp/ranges/borrowed_range
iota_view
enable_borrowed_range 这个是什么意思?
1. iota_view ??
2. piplines

concept 是类,没有const, ref
view_interface 使用了 CRTP https://en.cppreference.com/w/cpp/language/crtp


iota_view <-- view_interface <-- view_base

----------------------


summary
============

range的实现思路并不难,本质就是对Iterator的封装,来实现的各种功能,

但它的核心(或实现的基础)是`concept`,各种的concept
