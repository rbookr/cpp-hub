import{_ as s,b as n,a,J as l}from"./chunks/framework.218694e7.js";const u=JSON.parse('{"title":"1. use PMR","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. use PMR","slug":"_1-use-pmr"},{"level":3,"title":"Standard Memory Resource","slug":"standard-memory-resource"},{"level":2,"title":"2. Define Custom Memory Resource Support Custom type","slug":"_2-define-custom-memory-resource-support-custom-type"},{"level":2,"title":"3. Providing memory resource support for custom types","slug":"_3-providing-memory-resource-support-for-custom-types"}],"relativePath":"cpp17/PMR/index.md"}'),p={name:"cpp17/PMR/index.md"},o=l(`<p>\u8FD9\u91CC\u63D0\u4F9B\u4E86pmr\u7684\u5B9E\u73B0\u4EE3\u7801</p><p><a href="https://github.com/gcc-mirror/gcc/blob/16e2427f50c208dfe07d07f18009969502c25dc8/libstdc%2B%2B-v3/include/experimental/memory_resource" target="_blank" rel="noreferrer">https://github.com/gcc-mirror/gcc/blob/16e2427f50c208dfe07d07f18009969502c25dc8/libstdc%2B%2B-v3/include/experimental/memory_resource</a></p><p><a href="https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/src/c%2B%2B17/memory_resource.cc" target="_blank" rel="noreferrer">gcc/memory_resource.cc at master \xB7 gcc-mirror/gcc</a></p><p>\u52A8\u6001\u7684\u5185\u5B58\u7BA1\u7406 pmr\u5927\u6982\u610F\u601D\u662F\u201C\u591A\u6001\u7684\u5185\u5B58\u8D44\u6E90\u201D pmr\u662Fpolymorphic memory resource\u7684\u7F29\u5199</p><p>cpp17 complete guide episode 27 PMR</p><h2 id="_1-use-pmr" tabindex="-1">1. use PMR <a class="header-anchor" href="#_1-use-pmr" aria-hidden="true">#</a></h2><h3 id="standard-memory-resource" tabindex="-1">Standard Memory Resource <a class="header-anchor" href="#standard-memory-resource" aria-hidden="true">#</a></h3><ul><li><p>new_delete_resource()</p></li><li><p>synchroinzed_poll_resource</p></li><li><p>unsynchroinzed_poll_resource</p></li><li><p>monotonic_buffer_resource,\u53EF\u4EE5\u76F4\u63A5\u5728\u5934\u6587\u4EF6\u91CC\u770B\u5230\u6E90\u7801</p></li><li><p>null_memory_resource</p></li><li><p>get_default_resource</p></li><li><p>set_default_resource</p></li></ul><div class="language-cpp line-numbers-mode"><button class="copy"></button><span class="lang">cpp</span><pre><code><span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">inline</span><span style="color:#A6ACCD;"> memory_resource</span><span style="color:#89DDFF;">*</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">new_delete_resource</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">noexcept</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">type</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">resource_adaptor</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">__new_allocator</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">&gt;&gt;;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">alignas(</span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">static</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">unsigned</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">char</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">__buf</span><span style="color:#89DDFF;">[sizeof(</span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">)];</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">static</span><span style="color:#F07178;"> type</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> __r </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new(</span><span style="color:#F07178;">__buf</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> type</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> __r</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>\u57FA\u7C7B<code>std::pmr::memory_resource</code></p><p>\u7EAF\u865A\u51FD\u6570</p><div class="language-cpp line-numbers-mode"><button class="copy"></button><span class="lang">cpp</span><pre><code><span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">memory_resource</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">static</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">constexpr</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">size_t</span><span style="color:#F07178;"> _S_max_align </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">alignof(</span><span style="color:#FFCB6B;">max_align_t</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">public</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">memory_resource</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">default</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">memory_resource</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">memory_resource</span><span style="color:#C792EA;">&amp;</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">default</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">virtual</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">~memory_resource</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">default</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">memory_resource</span><span style="color:#C792EA;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">operator</span><span style="color:#FFCB6B;">=</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">memory_resource</span><span style="color:#C792EA;">&amp;</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    _GLIBCXX_NODISCARD </span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">*</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">allocate</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">size_t</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">__bytes</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">size_t</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">__alignment</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> _S_max_align</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">do_allocate</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">__bytes</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> __alignment</span><span style="color:#89DDFF;">);</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">void</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">deallocate</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void*</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">__p</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">size_t</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">__bytes</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">size_t</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">__alignment</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> _S_max_align</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">do_deallocate</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">__p</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> __bytes</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> __alignment</span><span style="color:#89DDFF;">);</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">bool</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">is_equal</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">memory_resource</span><span style="color:#C792EA;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">__other</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">noexcept</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">do_is_equal</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">__other</span><span style="color:#89DDFF;">);</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">protected</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">virtual</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">*</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">do_allocate</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">size_t</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">__bytes</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">size_t</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">__alignment</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">virtual</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">void</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">do_deallocate</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void*</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">__p</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">size_t</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">__bytes</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">size_t</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">__alignment</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">virtual</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">bool</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">do_is_equal</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">memory_resource</span><span style="color:#C792EA;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">__other</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">noexcept</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><p>monotonic_buffer_resource</p><ul><li>\u6709\u4E00\u4E2A\u90E8\u5206\u7684\u4EE3\u7801\u5728\u5934\u6587\u4EF6</li><li>\u6709\u4E00\u90E8\u5206\u7684\u4EE3\u7801\u5728: <a href="https://github.com/gcc-mirror/gcc/blob/master/libstdc++-v3/src/c++17/memory_resource.cc" target="_blank" rel="noreferrer">https://github.com/gcc-mirror/gcc/blob/master/libstdc++-v3/src/c++17/memory_resource.cc</a></li></ul><p>FAQ: \u90A3\u4E9B\u5BB9\u5668\u5982<code>std::pmr::vector</code>\u662F\u600E\u4E48\u4F7F\u7528<code>memory_resource\u7684\u5462?</code><code>allocate(\u57FA\u7C7B) -&gt; do_allocate(\u5B50\u7C7B)</code></p><p>FAQ: \u600E\u4E48\u6837\u624D\u80FD\u4E00\u4E2Adefault_resource\u5462</p><div class="language- line-numbers-mode"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">__constinit constant_init&lt;atomic_mem_res&gt; default_res{&amp;newdel_res.obj};</span></span>
<span class="line"><span style="color:#A6ACCD;">\u6216\u8005\u662F</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">struct {</span></span>
<span class="line"><span style="color:#A6ACCD;">  atomic_mem_res obj = &amp;newdel_res.obj;</span></span>
<span class="line"><span style="color:#A6ACCD;">} default_res __attribute__ ((init_priority (100))); //\u4E00\u4E2A\u5168\u5C40\u53D8\u91CF</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="_2-define-custom-memory-resource-support-custom-type" tabindex="-1">2. Define Custom Memory Resource Support Custom type <a class="header-anchor" href="#_2-define-custom-memory-resource-support-custom-type" aria-hidden="true">#</a></h2><h2 id="_3-providing-memory-resource-support-for-custom-types" tabindex="-1">3. Providing memory resource support for custom types <a class="header-anchor" href="#_3-providing-memory-resource-support-for-custom-types" aria-hidden="true">#</a></h2><ol><li>define allocator_type as public member defined as polymorphic allocator</li><li>add overloads for all constructors to take the allocator as additional argument</li><li>let initializing constructors without an allocator argument use allocator_type</li></ol><p>\u4E3A\u4EC0\u4E48<code>std::pmr::vector&lt;std::pmr::string&gt; coll(&amp;trakcer)</code> \u4F7F\u7528\u4E86\u540C\u4E00\u4E2A<code>memory_resource\u5462</code></p>`,21),e=[o];function r(c,t,y,F,i,D){return a(),n("div",null,e)}var _=s(p,[["render",r]]);export{u as __pageData,_ as default};
