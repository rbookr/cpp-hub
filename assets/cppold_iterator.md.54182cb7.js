import{_ as e,b as t,a as r,J as a}from"./chunks/framework.218694e7.js";const g=JSON.parse('{"title":"2. [LegacyInputIterator][2]","description":"","frontmatter":{},"headers":[{"level":2,"title":"2. [LegacyInputIterator][2]","slug":"_2-legacyinputiterator"},{"level":2,"title":"3. [Iterator_library]()","slug":"_3-iterator-library"},{"level":2,"title":"\u5F15\u7528","slug":"\u5F15\u7528"}],"relativePath":"cppold/iterator.md"}'),o={name:"cppold/iterator.md"},i=a('<ol><li><a href="https://en.cppreference.com/w/cpp/named_req/Iterator" target="_blank" rel="noreferrer">LegacyIterator</a> ==========</li></ol><p>FAQ1: how understand the mean of &quot;named requirements&quot;? -&gt; \u7ED9\u4E00\u4E2A\u5177\u4F53\u7684\u9700\u6C42\u53D6\u4E00\u4E2A\u540D\u5B57</p><p>why use <code>Legacy</code> prefix? see this : <a href="https://stackoverflow.com/a/53970846" target="_blank" rel="noreferrer">https://stackoverflow.com/a/53970846</a></p><blockquote><p>Pre-C++20, a &quot;concept&quot; was just a set of requirements in the standard that represented the behavior expected of certain template parameters. In C++20, with concepts becoming an actual language feature, that needed to shift. The problem is that the Ranges concept of &quot;RandomAccessIterator&quot; is not the same as the old-style &quot;concept&quot; of &quot;RandomAccessIterator&quot;.</p></blockquote><p>\u6240\u4EE5\u6211\u4EEC\u8FD9\u91CC\u7684\u8BB2\u7684\u5176\u5B9E\u662F<strong>\u8001\u5F0F\u7684\u8FED\u4EE3\u5668</strong></p><p><a href="https://en.cppreference.com/w/cpp/named_req/Iterator#Requirements" target="_blank" rel="noreferrer">requirements</a> : LegacyIterator must <strong>satisfy</strong></p><ul><li>CopyConstrcutible</li><li>CopyAssignable</li><li>Destrutible</li><li>swapable</li><li>has member typedefs <ul><li><code>value_type</code></li><li>diffrence_type</li><li>reference</li><li>pointer</li><li>iterator_category</li></ul></li><li>operator</li><li><code>*r</code></li><li><code>++r -&gt; It&amp;</code></li></ul><p><code>r</code> is <strong>Dereferenceable</strong> and <strong>incrementable</strong></p><p>\u6211\u4EEC\u53EF\u4EE5\u8FD9\u91CC <a href="https://en.cppreference.com/w/cpp/iterator/iterator_traits" target="_blank" rel="noreferrer">iterator_traits</a> \u770B\u5230\u4E00\u4E2A\u5177\u4F53\u7684<code>iterator</code>\u8981\u6EE1\u8DB3\u7684\u6761\u4EF6</p><h2 id="_2-legacyinputiterator" tabindex="-1">2. <a href="https://en.cppreference.com/w/cpp/named_req/InputIterator" target="_blank" rel="noreferrer">LegacyInputIterator</a> <a class="header-anchor" href="#_2-legacyinputiterator" aria-hidden="true">#</a></h2><h2 id="_3-iterator-library" tabindex="-1">3. <a href="./.html">Iterator_library</a> <a class="header-anchor" href="#_3-iterator-library" aria-hidden="true">#</a></h2><p>guarntee validity for single pass algoritms</p><p>requirements</p><ul><li>satisfy LegacyIterator</li><li>EqualityComaparable</li></ul><p><a href="https://www.geeksforgeeks.org/input-iterators-in-cpp/" target="_blank" rel="noreferrer">https://www.geeksforgeeks.org/input-iterators-in-cpp/</a> sample-code</p><p>//https://en.cppreference.com/w/cpp/named_req/InputIterator</p><p>\u4E00\u4E2A\u91CD\u8981\u7684\u95EE\u9898 \u7B97\u6CD5\u5404\u81EA\u9700\u8981\u54EA\u4E9B\u7C7B\u578B\u7684\u8FED\u4EE3\u5668 \u6BCF\u4E2A\u5BB9\u5668\u662F\u4EC0\u4E48\u7C7B\u578B\u7684\u8FED\u4EE3\u5668</p><p>\u8FED\u4EE3\u5668\u7684\u8F85\u52A9\u51FD\u6570</p><p>\u7B80\u5355input \u8FED\u4EE3\u5668\u5B9E\u73B0</p><p>STL \u4E2D\u6709\u7528\u4E8E\u64CD\u4F5C\u8FED\u4EE3\u5668\u7684\u4E09\u4E2A\u51FD\u6570\u6A21\u677F\uFF0C\u5B83\u4EEC\u662F\uFF1A</p><p>advance(p, n)\uFF1A\u4F7F\u8FED\u4EE3\u5668 p \u5411\u524D\u6216\u5411\u540E\u79FB\u52A8 n \u4E2A\u5143\u7D20\u3002</p><p>distance(p, q)\uFF1A\u8BA1\u7B97\u4E24\u4E2A\u8FED\u4EE3\u5668\u4E4B\u95F4\u7684\u8DDD\u79BB\uFF0C\u5373\u8FED\u4EE3\u5668 p \u7ECF\u8FC7\u591A\u5C11\u6B21 + + \u64CD\u4F5C\u540E\u548C\u8FED\u4EE3\u5668 q \u76F8\u7B49\u3002\u5982\u679C\u8C03\u7528\u65F6 p \u5DF2\u7ECF\u6307\u5411 q \u7684\u540E\u9762\uFF0C\u5219\u8FD9\u4E2A\u51FD\u6570\u4F1A\u9677\u5165\u6B7B\u5FAA\u73AF\u3002</p><p>iter_swap(p, q)\uFF1A\u7528\u4E8E\u4EA4\u6362\u4E24\u4E2A\u8FED\u4EE3\u5668 p\u3001q \u6307\u5411\u7684\u503C\u3002</p><p>iterator library <a href="https://www.geeksforgeeks.org/iterators-c-stl/" target="_blank" rel="noreferrer">https://www.geeksforgeeks.org/iterators-c-stl/</a> 4. next()\xA0:- This function\xA0returns the new iterator\xA0that the iterator would point after\xA0advancing the positions\xA0mentioned in its arguments.</p><ol start="5"><li>prev()\xA0:- This function\xA0returns the new iterator\xA0that the iterator would point\xA0after decrementing the positions\xA0mentioned in its arguments.</li></ol><p>insert()</p><h2 id="\u5F15\u7528" tabindex="-1">\u5F15\u7528 <a class="header-anchor" href="#\u5F15\u7528" aria-hidden="true">#</a></h2><ul><li><a href="https://stackoverflow.com/questions/35247177/c-input-iterator" target="_blank" rel="noreferrer">C++ Input Iterator - Stack Overflow</a></li></ul><p><a href="https://en.cppreference.com/w/cpp/iterator/iterator_traits" target="_blank" rel="noreferrer">https://en.cppreference.com/w/cpp/iterator/iterator_traits</a><a href="https://en.cppreference.com/w/cpp/iterator/iterator_tags" target="_blank" rel="noreferrer">https://en.cppreference.com/w/cpp/iterator/iterator_tags</a></p>',29),p=[i];function n(s,l,c,h,d,u){return r(),t("div",null,p)}var _=e(o,[["render",n]]);export{g as __pageData,_ as default};
