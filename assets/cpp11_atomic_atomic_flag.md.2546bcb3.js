import{_ as a,b as s,a as n,J as e}from"./chunks/framework.218694e7.js";const b=JSON.parse('{"title":"operations","description":"","frontmatter":{},"headers":[{"level":2,"title":"operations","slug":"operations"}],"relativePath":"cpp11/atomic/atomic_flag.md"}'),l={name:"cpp11/atomic/atomic_flag.md"},t=e(`<pre><code>std::atomic_flag is an atomic boolean type. Unlike all specializations of std::atomic, it is guaranteed to be lock-free. Unlike std::atomic&lt;bool&gt;, std::atomic_flag does not provide load or store operations.
</code></pre><p>\u4FDD\u8BC1\u662F\u65E0\u9501\u7684</p><h2 id="operations" tabindex="-1">operations <a class="header-anchor" href="#operations" aria-hidden="true">#</a></h2><ul><li>clear \u539F\u5B50\u7684\u8BBE\u5B9A\u4E3Afalse</li><li>test_and_set \u539F\u5B50\u7684\u8BBE\u5B9A\u4E3Atrue</li></ul><p>std::atomic_flag \u6807\u5FD7\uFF0C\u5982\u679C std::atomic_flag \u4E4B\u524D\u6CA1\u6709\u88AB\u8BBE\u7F6E\u8FC7\uFF0C\u5219\u8BBE\u7F6E std::atomic_flag \u7684\u6807\u5FD7\uFF0C\u5E76\u8FD4\u56DE\u5148\u524D\u8BE5 std::atomic_flag \u5BF9\u8C61\u662F\u5426\u88AB\u8BBE\u7F6E\u8FC7\uFF0C\u5982\u679C\u4E4B\u524D std::atomic_flag \u5BF9\u8C61\u5DF2\u88AB\u8BBE\u7F6E\uFF0C\u5219\u8FD4\u56DE true\uFF0C\u5426\u5219\u8FD4\u56DE false\u3002</p><div class="language- line-numbers-mode"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">   +-------+                  +-------+</span></span>
<span class="line"><span style="color:#A6ACCD;">   | false | -test and_set-&gt;  | true  |</span></span>
<span class="line"><span style="color:#A6ACCD;">   +-------+       |          +-------+</span></span>
<span class="line"><span style="color:#A6ACCD;">                   |</span></span>
<span class="line"><span style="color:#A6ACCD;">                   v</span></span>
<span class="line"><span style="color:#A6ACCD;">                 \u8FD4\u56DEfalse</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>\u4F5C\u7528: \u53EF\u4EE5\u4FDD\u8BC1\u53EA\u6709\u4E00\u4E2A\u7EBF\u7A0B\u5728\u5904\u7406\u8FD9\u4E2A\u8D44\u6E90</p><p>\u662F\u4E92\u65A5\u81EA\u65CB\u8F6C\u9501</p><p><a href="https://en.cppreference.com/w/cpp/atomic/atomic_flag" target="_blank" rel="noreferrer">std::atomic_flag - cppreference.com</a></p>`,9),p=[t];function o(r,c,i,_,d,m){return n(),s("div",null,p)}var u=a(l,[["render",o]]);export{b as __pageData,u as default};
