import{_ as s,b as n,a,J as e}from"./chunks/framework.218694e7.js";const d=JSON.parse('{"title":"FAQ","description":"","frontmatter":{},"headers":[{"level":2,"title":"FAQ","slug":"faq"},{"level":2,"title":"\u5C1D\u8BD5","slug":"\u5C1D\u8BD5"},{"level":2,"title":"1 use decltype(auto) for perfect forwarding","slug":"_1-use-decltype-auto-for-perfect-forwarding"},{"level":2,"title":"2 Delaying return type deduction in recursive templates","slug":"_2-delaying-return-type-deduction-in-recursive-templates"},{"level":2,"title":"3 Other uses","slug":"_3-other-uses"}],"relativePath":"cpp14/delctype_auto/index.md"}'),l={name:"cpp14/delctype_auto/index.md"},p=e(`<p><a href="https://en.cppreference.com/w/cpp/language/auto" target="_blank" rel="noreferrer">Placeholder type specifiers (since C++11) - cppreference.com</a></p><h2 id="faq" tabindex="-1">FAQ <a class="header-anchor" href="#faq" aria-hidden="true">#</a></h2><ul><li>\u5982\u4F55\u53BB\u7406\u89E3<code>decltype(auto)</code>?</li><li><code>decltype(auto)</code>\u4E0E<code>auto</code>\u6709\u4EC0\u4E48\u4E0D\u540C?</li><li>\u4EC0\u4E48\u65F6\u5019\u4F7F\u7528<code>decltype(auto)</code></li></ul><p>the compilation of <a href="https://en.cppreference.com/w/cpp/language/auto" target="_blank" rel="noreferrer">cppreference</a> is following:</p><p>The placeholder auto may be accompanied by modifiers, such as const or &amp;, which will participate in the type deduction. The placeholder decltype(auto) must be the sole constituent of the declared type. (since C++14)</p><p><strong>Notice:</strong></p><ul><li><code>auto</code> : type is deduced using the rules for <a href="https://en.cppreference.com//w/cpp/language/template_argument_deduction#Other_contexts" title="cpp/language/template argument deduction" target="_blank" rel="noreferrer">template argument deduction</a>.</li><li><code>decltype(type is [</code>decltype(expr)<code>](https://en.cppreference.com/w/cpp/language/decltype &quot;cpp/language/decltype&quot;), where </code>expr<code> is the initializer.)</code></li></ul><div class="language-plaintext line-numbers-mode"><button class="copy"></button><span class="lang">plaintext</span><pre><code><span class="line"><span style="color:#A6ACCD;">int a;</span></span>
<span class="line"><span style="color:#A6ACCD;">(a); // expression type is int &amp;</span></span>
<span class="line"><span style="color:#A6ACCD;">auto b = (a); // b type is int</span></span>
<span class="line"><span style="color:#A6ACCD;">decltype(auto) c = (a); // c type is int&amp;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>auto</code>\u57FA\u672C\u5C31\u662F\u539F\u59CB\u7C7B\u578B,\u9664\u975E\u8FD9\u6837<code>auto &amp;</code></p><h2 id="\u5C1D\u8BD5" tabindex="-1">\u5C1D\u8BD5 <a class="header-anchor" href="#\u5C1D\u8BD5" aria-hidden="true">#</a></h2><div class="language-cpp line-numbers-mode"><button class="copy"></button><span class="lang">cpp</span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">utils.hpp</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">auto</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">func1</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">static_cast&lt;</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">&amp;&gt;(</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">decltype</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">auto</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">func2</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">static_cast&lt;</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">&amp;&gt;(</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">decltype</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">auto</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">func3</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">static_cast&lt;</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">&amp;&amp;&gt;(</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">log</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">auto func1 return type : </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;">type_name</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">decltype</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">func1</span><span style="color:#89DDFF;">())&gt;());</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">log</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">type_name</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">decltype</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">func1</span><span style="color:#89DDFF;">)&gt;());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">log</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">auto func1 return type : </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">type_name</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">invoke_result_t</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">decltype</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">func1</span><span style="color:#89DDFF;">)&gt;&gt;());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">log</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">auto func2 return type : </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">type_name</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">invoke_result_t</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">decltype</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">func2</span><span style="color:#89DDFF;">)&gt;&gt;());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">log</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">auto func3 return type : </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">type_name</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">invoke_result_t</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">decltype</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">func3</span><span style="color:#89DDFF;">)&gt;&gt;());</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><p>discover: if function return type is <code>decltype(auto)</code> ,then the real of return type is equal with <strong>the return expression type</strong>.</p><p>According to this <a href="https://stackoverflow.com/questions/24109737/what-are-some-uses-of-decltypeauto" target="_blank" rel="noreferrer">c++ - What are some uses of decltype(auto)? - Stack Overflow</a></p><h2 id="_1-use-decltype-auto-for-perfect-forwarding" tabindex="-1">1 use <code>decltype(auto)</code> for perfect forwarding <a class="header-anchor" href="#_1-use-decltype-auto-for-perfect-forwarding" aria-hidden="true">#</a></h2><div class="language-cpp line-numbers-mode"><button class="copy"></button><span class="lang">cpp</span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">// perfect forwarding of a function call must use decltype(auto)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// in case the function it calls returns by reference</span></span>
<span class="line"><span style="color:#C792EA;">template</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">F</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Args</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">decltype</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">auto</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">PerfectForward</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">F fun</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Args</span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;">... args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fun</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">forward</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Args</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#F07178;">args</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;">...</span><span style="color:#89DDFF;">);</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="_2-delaying-return-type-deduction-in-recursive-templates" tabindex="-1">2 Delaying return type deduction in recursive templates <a class="header-anchor" href="#_2-delaying-return-type-deduction-in-recursive-templates" aria-hidden="true">#</a></h2><h2 id="_3-other-uses" tabindex="-1">3 Other uses <a class="header-anchor" href="#_3-other-uses" aria-hidden="true">#</a></h2><div class="language- line-numbers-mode"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">int i;</span></span>
<span class="line"><span style="color:#A6ACCD;">int&amp;&amp; f();</span></span>
<span class="line"><span style="color:#A6ACCD;">auto x3a = i;                  // decltype(x3a) is int</span></span>
<span class="line"><span style="color:#A6ACCD;">decltype(auto) x3d = i;        // decltype(x3d) is int</span></span>
<span class="line"><span style="color:#A6ACCD;">auto x4a = (i);                // decltype(x4a) is int</span></span>
<span class="line"><span style="color:#A6ACCD;">decltype(auto) x4d = (i);      // decltype(x4d) is int&amp;</span></span>
<span class="line"><span style="color:#A6ACCD;">auto x5a = f();                // decltype(x5a) is int</span></span>
<span class="line"><span style="color:#A6ACCD;">decltype(auto) x5d = f();      // decltype(x5d) is int&amp;&amp;</span></span>
<span class="line"><span style="color:#A6ACCD;">auto x6a = { 1, 2 };           // decltype(x6a) is std::initializer_list&lt;int&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">decltype(auto) x6d = { 1, 2 }; // error, { 1, 2 } is not an expression</span></span>
<span class="line"><span style="color:#A6ACCD;">auto *x7a = &amp;i;                // decltype(x7a) is int*</span></span>
<span class="line"><span style="color:#A6ACCD;">decltype(auto)*x7d = &amp;i;       // error, declared type is not plain decltype(auto)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div>`,18),o=[p];function t(c,r,i,y,F,u){return a(),n("div",null,o)}var A=s(l,[["render",t]]);export{d as __pageData,A as default};
