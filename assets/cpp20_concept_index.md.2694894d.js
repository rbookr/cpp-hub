import{_ as s,b as n,a,J as e}from"./chunks/framework.218694e7.js";var l="/assets/concept.535577ea.png";const d=JSON.parse('{"title":"c++ stories","description":"","frontmatter":{},"headers":[{"level":2,"title":"c++ stories","slug":"c-stories"},{"level":3,"title":"how to use","slug":"how-to-use"},{"level":2,"title":"requires-expressions","slug":"requires-expressions"},{"level":2,"title":"\u91CD\u8981\u7684\u8D44\u6599","slug":"\u91CD\u8981\u7684\u8D44\u6599"}],"relativePath":"cpp20/concept/index.md"}'),p={name:"cpp20/concept/index.md"},t=e('<p>\u6211\u5199\u7684\u6587\u6863</p><p><img src="'+l+`" alt=""></p><p><a href="https://www.cppstories.com/2021/concepts-intro/" target="_blank" rel="noreferrer">C++20 Concepts - a Quick Introduction - C++ Stories</a></p><ol><li>\u4EC0\u4E48\u662Fconcept</li></ol><blockquote><p>In short, a concept is a set of constraints on template parameters evaluated at compile time.</p></blockquote><blockquote><p>A concept is a named set of requirements. The definition of a concept must appear at namespace scope. -cpprefrence</p></blockquote><p>\u5BF9<code>template</code>\u7684\u53C2\u6570\u63D0\u4F9B\u4E00\u7CFB\u5217\u7684<code>constraints</code></p><p>concept \u53EF\u4EE5\u4EE3\u7801c++17\u7684\u5F88SFINA,\u7B80\u5316\u4EE3\u7801,\u589E\u52A0\u4EE3\u7801\u53EF\u8BFB\u6027</p><p>cpprefrence \u4E0Aconcept\u7684\u7AE0\u8282</p><ul><li>Constraints <ul><li>Conjunctions</li><li>Disjunctions</li><li>Atomic constraints Constraint normalization</li></ul></li><li>Requires clauses</li><li>Partial ordering of constraints</li></ul><h2 id="c-stories" tabindex="-1">c++ stories <a class="header-anchor" href="#c-stories" aria-hidden="true">#</a></h2><div class="language-cpp line-numbers-mode"><button class="copy"></button><span class="lang">cpp</span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">//a example of simple concept</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//use one condition of type_traits</span></span>
<span class="line"><span style="color:#C792EA;">template</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F78C6C;">concept</span><span style="color:#A6ACCD;"> integral </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">is_integral_v</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">T</span><span style="color:#89DDFF;">&gt;;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">template</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">typename</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F78C6C;">concept</span><span style="color:#A6ACCD;"> ILabel </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">requires</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">T v</span><span style="color:#89DDFF;">)</span><span style="color:#676E95;font-style:italic;"> // use type T define parameter v</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">v</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">buildHtml</span><span style="color:#89DDFF;">()}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">convertible_to</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">string</span><span style="color:#89DDFF;">&gt;;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // v.buildHtml meaning that T object has member function called buildHtml()</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // which return somthing convertible to std::string.</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="how-to-use" tabindex="-1">how to use <a class="header-anchor" href="#how-to-use" aria-hidden="true">#</a></h3><p>for template function</p><div class="language-cpp line-numbers-mode"><button class="copy"></button><span class="lang">cpp</span><pre><code><span class="line"><span style="color:#C792EA;">template</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">typename</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F78C6C;">requires</span><span style="color:#A6ACCD;"> CONDITION</span><span style="color:#676E95;font-style:italic;"> // &lt;-- there</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">DoSomething</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> param</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">template</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">typename</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;">       //v-- or there</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">DoSomething</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> param</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">requires</span><span style="color:#A6ACCD;"> CONDITION</span></span>
<span class="line"><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="requires-expressions" tabindex="-1">requires-expressions <a class="header-anchor" href="#requires-expressions" aria-hidden="true">#</a></h2><ol><li>\u8BED\u6CD5</li></ol><div class="language-cpp line-numbers-mode"><button class="copy"></button><span class="lang">cpp</span><pre><code><span class="line"><span style="color:#F78C6C;">1.</span><span style="color:#A6ACCD;">\u4E0D\u5E26\u53C2\u6570</span></span>
<span class="line"><span style="color:#F78C6C;">2.</span><span style="color:#A6ACCD;">\u5E26\u53C2\u6570</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>\u56DB\u79CDrequirements</p><ul><li><p>simple requirement \u7B80\u5355\u7684</p></li><li><p>type requirements \u7C7B\u578B\u76F8\u5173\u7684</p><div class="language- line-numbers-mode"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">\u5E26\u6709 typename \u8FD9\u4E2A\u5173\u952E\u5B57,\u540E\u9762\u8DDF\u4E00\u4E2A\u7C7B\u578B\u540D</span></span>
<span class="line"><span style="color:#A6ACCD;">- \u68C0\u67E5\u4E00\u4E2Anested type \u662F\u5426\u5B58\u5728</span></span>
<span class="line"><span style="color:#A6ACCD;">- class template specialization \u662F\u5426\u5B58\u5728</span></span>
<span class="line"><span style="color:#A6ACCD;">- an alias template specialization names</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>compound requirements \u590D\u5408\u578B\u7684</p><div class="language-plaintext line-numbers-mode"><button class="copy"></button><span class="lang">plaintext</span><pre><code><span class="line"><span style="color:#A6ACCD;">{ expression } noexcept(optional) return-type-requirement(optional) ;		</span></span>
<span class="line"><span style="color:#A6ACCD;">return-type-requirement	-	-&gt; type-constraint</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol><li>\u6709\u4E0A\u9762\u7684\u5F62\u5F0F</li><li>Template arguments (if any) are substituted into expression;</li><li>If noexcept is used, expression must not be potentially throwing;</li><li>If return-type-requirement is present, then:</li></ol><ul><li>Template arguments are substituted into the return-type-requirement;</li><li>decltype((expression)) must satisfy the constraint imposed by the type-constraint. Otherwise, the enclosing requires-expression is false.</li></ul></li><li><p>nested requirements \u5D4C\u5957\u7684</p><ol><li>form</li></ol><div class="language- line-numbers-mode"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">requires constraint-expression ;		</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><div class="language-plaintext line-numbers-mode"><button class="copy"></button><span class="lang">plaintext</span><pre><code><span class="line"><span style="color:#A6ACCD;">template&lt;class T&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">concept Semiregular = DefaultConstructible&lt;T&gt; &amp;&amp;</span></span>
<span class="line"><span style="color:#A6ACCD;">  CopyConstructible&lt;T&gt; &amp;&amp; Destructible&lt;T&gt; &amp;&amp; CopyAssignable&lt;T&gt; &amp;&amp;</span></span>
<span class="line"><span style="color:#A6ACCD;">requires(T a, size_t n)</span></span>
<span class="line"><span style="color:#A6ACCD;">{  </span></span>
<span class="line"><span style="color:#A6ACCD;">    requires Same&lt;T*, decltype(&amp;a)&gt;; // nested: &quot;Same&lt;...&gt; evaluates to true&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    { a.~T() } noexcept; // compound: &quot;a.~T()&quot; is a valid expression that doesn&#39;t throw</span></span>
<span class="line"><span style="color:#A6ACCD;">    requires Same&lt;T*, decltype(new T)&gt;; // nested: &quot;Same&lt;...&gt; evaluates to true&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    requires Same&lt;T*, decltype(new T[n])&gt;; // nested</span></span>
<span class="line"><span style="color:#A6ACCD;">    { delete new T }; // compound</span></span>
<span class="line"><span style="color:#A6ACCD;">    { delete new T[n] }; // compound</span></span>
<span class="line"><span style="color:#A6ACCD;">};</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></li><li><p><a href="https://en.cppreference.com/w/cpp/language/requires" target="_blank" rel="noreferrer">Requires expression (since C++20) - cppreference.com</a></p></li><li><p><a href="https://akrzemi1.wordpress.com/2020/01/29/requires-expression/" target="_blank" rel="noreferrer">Requires-expression | Andrzej&#39;s C++ blog</a></p></li></ul><h2 id="\u91CD\u8981\u7684\u8D44\u6599" tabindex="-1">\u91CD\u8981\u7684\u8D44\u6599 <a class="header-anchor" href="#\u91CD\u8981\u7684\u8D44\u6599" aria-hidden="true">#</a></h2><ul><li><a href="https://en.cppreference.com/w/cpp/concepts" target="_blank" rel="noreferrer">Concepts library (C++20) - cppreference.com</a></li></ul>`,22),o=[t];function r(c,i,u,y,m,C){return a(),n("div",null,o)}var A=s(p,[["render",r]]);export{d as __pageData,A as default};
