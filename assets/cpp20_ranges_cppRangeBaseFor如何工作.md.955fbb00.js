import{_ as s,b as n,a,J as p}from"./chunks/framework.218694e7.js";const u=JSON.parse('{"title":"\u89C6\u9891\u6559\u7A0B youtube cppcon","description":"","frontmatter":{},"headers":[{"level":2,"title":"\u89C6\u9891\u6559\u7A0B youtube cppcon","slug":"\u89C6\u9891\u6559\u7A0B-youtube-cppcon"}],"relativePath":"cpp20/ranges/cppRangeBaseFor\u5982\u4F55\u5DE5\u4F5C.md"}'),l={name:"cpp20/ranges/cppRangeBaseFor\u5982\u4F55\u5DE5\u4F5C.md"},e=p(`<ul><li><a href="https://www.nextptr.com/tutorial/ta1208652092/how-cplusplus-rangebased-for-loop-works" target="_blank" rel="noreferrer">How C++ range-based for loop works - nextptr</a></li><li><a href="https://zhuanlan.zhihu.com/p/86809598" target="_blank" rel="noreferrer">ranges for C++20\u7B80\u4ECB - \u77E5\u4E4E</a></li><li><a href="https://zhuanlan.zhihu.com/p/133517420" target="_blank" rel="noreferrer">\u4E3Agcc10\u7684ranges\u5199\u81EA\u5B9A\u4E49view - \u77E5\u4E4E</a></li></ul><div class="language-cpp line-numbers-mode"><button class="copy"></button><span class="lang">cpp</span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> range decl </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> range_expression</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    //loop</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>=&gt;</p><div class="language-cpp line-numbers-mode"><button class="copy"></button><span class="lang">cpp</span><pre><code><span class="line"><span style="color:#A6ACCD;">util c</span><span style="color:#89DDFF;">++</span><span style="color:#F78C6C;">14</span></span>
<span class="line"><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;"> //\u6574\u4E2A\u5B9E\u73B0\u88AB {}\u5305\u542B range_expression \u7684\u751F\u547D</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">auto</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> range </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> range_expression</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">auto</span><span style="color:#F07178;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> beginExpr </span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> e </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> endExpr </span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> b</span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;">e </span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">b</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">        range decl </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">b</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        //loop</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-cpp line-numbers-mode"><button class="copy"></button><span class="lang">cpp</span><pre><code><span class="line"><span style="color:#A6ACCD;">c</span><span style="color:#89DDFF;">++</span><span style="color:#F78C6C;">17</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">auto</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> range </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> range_expression</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">auto</span><span style="color:#F07178;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> beginExpr</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">auto</span><span style="color:#F07178;"> e </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> endExpr</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> b</span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> e</span><span style="color:#89DDFF;">;,++</span><span style="color:#F07178;">b</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">        range decl </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">b</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        //loop</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="\u89C6\u9891\u6559\u7A0B-youtube-cppcon" tabindex="-1">\u89C6\u9891\u6559\u7A0B youtube cppcon <a class="header-anchor" href="#\u89C6\u9891\u6559\u7A0B-youtube-cppcon" aria-hidden="true">#</a></h2><p>ranges will return a ranges::dangling object</p><ul><li><a href="https://www.youtube.com/watch?v=d_E-VLyUnzc" target="_blank" rel="noreferrer">C++20 Ranges in Practice - Tristan Brindle - CppCon 2020 - YouTube</a></li></ul>`,8),o=[e];function r(c,t,F,i,y,D){return a(),n("div",null,o)}var d=s(l,[["render",r]]);export{u as __pageData,d as default};
