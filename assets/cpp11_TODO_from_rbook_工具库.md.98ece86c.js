import{_ as s,b as n,a,J as l}from"./chunks/framework.218694e7.js";const A=JSON.parse('{"title":"\u5DE5\u5177\u5E93","description":"","frontmatter":{"_id":"1bd66912cd","title":"\u5DE5\u5177\u5E93","date":"2021-01-01 21:48","update":"2021-01-01 21:48","author":"Rainboy"},"headers":[{"level":2,"title":"declval","slug":"declval"}],"relativePath":"cpp11/TODO_from_rbook/\u5DE5\u5177\u5E93.md"}'),p={name:"cpp11/TODO_from_rbook/\u5DE5\u5177\u5E93.md"},e=l(`<p>@[toc]</p><h2 id="declval" tabindex="-1">declval <a class="header-anchor" href="#declval" aria-hidden="true">#</a></h2><p>\u901A\u5E38\u548C<code>decltype</code>\u8FD0\u7B97\u7B26\u4E00\u8D77\u4F7F\u7528,\u5B83\u4F1A\u8FD4\u56DE\u4E00\u4E2A\u7C7B\u578B\u7684\u53F3\u503C\u5F15\u7528,\u5B9E\u73B0\u5982\u4E0B:</p><p>\u5B9A\u4E49\u5728<code>&lt;type_traits&gt;</code>\u5934\u6587\u4EF6\u4E0B\uFF0C\u6838\u5FC3\u662F\u628A\u7C7B\u578B\u4F5C\u4E3A\u8FD4\u56DE\u503C\uFF0C\u8FD9\u6837\u53EF\u4EE5\u4E00\u5B9A\u5177\u6709\u5B9E\u4F8B\u4E14\u4E0D\u7528\u5173\u5FC3\u6784\u9020\u7684\u95EE\u9898</p><div class="language-c line-numbers-mode"><button class="copy"></button><span class="lang">c</span><pre><code><span class="line"><span style="color:#A6ACCD;">template</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">typename T</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">T </span><span style="color:#82AAFF;">__declval</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">long</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">template</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">typename _Tp</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> __declval_protector</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">static</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">bool</span><span style="color:#F07178;"> __stop </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">false;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">template</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">typename _Tp</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">auto </span><span style="color:#82AAFF;">declval</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> noexcept </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">decltype</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">__declval</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">_Tp</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">static_assert</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">__declval_protector</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">_Tp</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;">::__stop</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//\u53EA\u80FD\u5728\u7F16\u8BD1\u7684\u65F6\u5019\u7528,\u4E0D\u80FD\u5B9E\u9645\u7684\u6267\u884C</span></span>
<span class="line"><span style="color:#F07178;">		    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">declval() must not be used!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> __declval</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">_Tp</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>\u4F7F\u7528</p><div class="language-c line-numbers-mode"><button class="copy"></button><span class="lang">c</span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">bits/stdc++.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">using namespace std</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">typedef</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">long</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">long</span><span style="color:#A6ACCD;"> ll</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> Test </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">Test</span><span style="color:#89DDFF;">()=</span><span style="color:#F07178;">delete</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">decltype</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">std::declval</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Test</span><span style="color:#89DDFF;">&gt;().</span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">())</span><span style="color:#F07178;"> a</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> std::is_same</span><span style="color:#89DDFF;">&lt;</span><span style="color:#82AAFF;">decltype</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">),</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;">::value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> endl</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div>`,7),o=[e];function c(t,r,F,y,D,i){return a(),n("div",null,o)}var u=s(p,[["render",c]]);export{A as __pageData,u as default};
